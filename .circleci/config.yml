---
format_version: '7'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: android
trigger_map:
- push_branch: master
  workflow: deploy
- push_branch: hms-release
  workflow: deploy
- workflow: pull-request
  pull_request_target_branch: "*"
workflows:
  automation-android:
    description: |
      ## How to get a signed APK

      This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:

      1. Click on **Code Signing** tab
      1. Find the **ANDROID KEYSTORE FILE** section
      1. Click or drop your file on the upload file field
      1. Fill the displayed 3 input fields:
       1. **Keystore password**
       1. **Keystore alias**
       1. **Private key password**
      1. Click on **[Save metadata]** button

      That's it! From now on, **Sign APK** step will receive your uploaded files.

      ## To run this workflow

      If you want to run this workflow manually:

      1. Open the app's build list page
      2. Click on **[Start/Schedule a Build]** button
      3. Select **deploy** in **Workflow** dropdown input
      4. Click **[Start Build]** button

      Or if you need this workflow to be started by a GIT event:

      1. Click on **Triggers** tab
      2. Setup your desired event (push/tag/pull) and select **deploy** workflow
      3. Click on **[Done]** and then **[Save]** buttons

      The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
    steps:
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ -z "$AUTOMATION_BRANCH" ]
            then
                  envman add --key AUTOMATION_BRANCH --value "develop"
            fi

            if [ -z "$TEST_SUITE" ]
            then
                  envman add --key TEST_SUITE --value "smoke"
            fi
        title: Check Automation Build Parameters
    - avd-manager@1:
        inputs:
        - api_level: '29'
        - abi: x86_64
        - create_command_flags: "--sdcard 1024M"
    - wait-for-android-emulator@1: {}
    - script@1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x\n\nfunction install_apk() {\n    cd $ANDROID_HOME/platform-tools\n
            \   # ./emulator -avd emulator -qemu -no-snapshot -no-window -no-audio
            -verbose -x\n    adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed)
            ]]; do sleep 1; done;' \n    adb install \"$BITRISE_APK_PATH\"\n    adb
            shell pm grant 'io.swvl.customer' android.permission.ACCESS_FINE_LOCATION\n\n}\n\ninstall_apk"
        title: Install APK on emulator
    - script@1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x\n\necho \"Installing Appium\"\nnpm install -g appium  --unsafe-perm=true
            --allow-root \n\nappium &>/dev/null &"
        title: Install Appium & Start Appium Server
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "Creating a directory for the automation project"
            mkdir customerAppAutomation

            echo "Start cloning automation repo"
            git clone -b $AUTOMATION_BRANCH git@github.com:swvl/customer-app-automation.git ./customerAppAutomation
        title: Git Clone Automation Project
    - brew-install@0:
        inputs:
        - packages: maven
        title: Brew install maven
        is_always_run: true
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            # Run Android appium Test
            cd customerAppAutomation
            ls -la
            echo "Start running customer app Automation Project"

            mvn test -Denv.os=Android -Denv.api=$ENV_NAME -DtestSuite=$TEST_SUITE -X
        title: Run Appium Android Tests
    - custom-test-results-export@0:
        inputs:
        - search_pattern: "*.html"
        - base_path: "$BITRISE_SOURCE_DIR/customerAppAutomation/"
        - test_name: Appium Test Result
    - deploy-to-bitrise-io@1:
        inputs:
        - permanent_download_url_map_format: "{{range $index, $element := .}}{{if
            $index}}|{{end}}{{$element.URL}}{{end}}"
        - deploy_path: "$BITRISE_SOURCE_DIR/customerAppAutomation/Test_Report.html"
    - slack@3:
        inputs:
        - channel: "#android-customer-automation"
        - channel_on_error: "#android-customer-automation"
        - buttons: |
            View App|${BITRISE_APP_URL}
            View Build|${BITRISE_BUILD_URL}
            Test Report|${BITRISE_PERMANENT_DOWNLOAD_URL_MAP}
        - webhook_url: "$SLACK_ANDROID_DEPLOYMENT"
    before_run:
    - generate-apk
    meta:
      bitrise.io:
        stack: osx-xcode-12.4.x
  automation-fix:
    description: |
      ## How to get a signed APK

      This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:

      1. Click on **Code Signing** tab
      1. Find the **ANDROID KEYSTORE FILE** section
      1. Click or drop your file on the upload file field
      1. Fill the displayed 3 input fields:
       1. **Keystore password**
       1. **Keystore alias**
       1. **Private key password**
      1. Click on **[Save metadata]** button

      That's it! From now on, **Sign APK** step will receive your uploaded files.

      ## To run this workflow

      If you want to run this workflow manually:

      1. Open the app's build list page
      2. Click on **[Start/Schedule a Build]** button
      3. Select **deploy** in **Workflow** dropdown input
      4. Click **[Start Build]** button

      Or if you need this workflow to be started by a GIT event:

      1. Click on **Triggers** tab
      2. Setup your desired event (push/tag/pull) and select **deploy** workflow
      3. Click on **[Done]** and then **[Save]** buttons

      The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
    steps:
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            if [ -z "$AUTOMATION_BRANCH" ]
            then
                  envman add --key AUTOMATION_BRANCH --value "develop"
            fi

            if [ -z "$TEST_SUITE" ]
            then
                  envman add --key TEST_SUITE --value "smoke"
            fi
        title: Check Automation Build Parameters
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            #set -x

            cd $ANDROID_HOME/emulator

            echo no | avdmanager create avd -n Nexus_5X_API_26 -k "system-images;android-26;google_apis;x86" --force

            emulator -avd Nexus_5X_API_26 -no-window -no-audio -debug-init > /dev/null 2>&1 &

            echo "Waiting emulator is ready..."

            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'

            echo "Emulator is ready!"
    - avd-manager@1:
        inputs:
        - api_level: '29'
        - create_command_flags: "--sdcard 1024M"
    - wait-for-android-emulator@1: {}
    - script@1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x\n\nfunction install_apk() {\n    cd $ANDROID_HOME/platform-tools\n
            \   # ./emulator -avd emulator -qemu -no-snapshot -no-window -no-audio
            -verbose -x\n    adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed)
            ]]; do sleep 1; done;' \n    adb install \"$BITRISE_APK_PATH\"\n    adb
            shell pm grant 'io.swvl.customer' android.permission.ACCESS_FINE_LOCATION\n\n}\n\ninstall_apk"
        title: Install APK on emulator
    - script@1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x\n\necho \"Installing Appium\"\nnpm install -g appium  --unsafe-perm=true
            --allow-root \n\nappium &>/dev/null &"
        title: Install Appium & Start Appium Server
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "Creating a directory for the automation project"
            mkdir customerAppAutomation

            echo "Start cloning automation repo"
            git clone -b $AUTOMATION_BRANCH git@github.com:swvl/customer-app-automation.git ./customerAppAutomation
        title: Git Clone Automation Project
    - brew-install@0:
        inputs:
        - packages: maven
        title: Brew install maven
        is_always_run: true
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            # Run Android appium Test
            cd customerAppAutomation
            ls -la
            echo "Start running customer app Automation Project"

            mvn test -Denv.os=Android -Denv.api=$ENV_NAME -DtestSuite=$TEST_SUITE -X
        title: Run Appium Android Tests
    - custom-test-results-export@0:
        inputs:
        - search_pattern: "*.html"
        - base_path: "$BITRISE_SOURCE_DIR/customerAppAutomation/"
        - test_name: Appium Test Result
    - deploy-to-bitrise-io@1:
        inputs:
        - permanent_download_url_map_format: "{{range $index, $element := .}}{{if
            $index}}|{{end}}{{$element.URL}}{{end}}"
        - deploy_path: "$BITRISE_SOURCE_DIR/customerAppAutomation/Test_Report.html"
    - slack@3:
        inputs:
        - channel: "#android-customer-automation"
        - channel_on_error: "#android-customer-automation"
        - buttons: |
            View App|${BITRISE_APP_URL}
            View Build|${BITRISE_BUILD_URL}
            Test Report|${BITRISE_PERMANENT_DOWNLOAD_URL_MAP}
        - webhook_url: "$SLACK_ANDROID_DEPLOYMENT"
    before_run:
    - generate-apk
    meta:
      bitrise.io:
        stack: linux-docker-android-20.04
  deploy:
    description: |
      ## How to get a signed APK

      This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:

      1. Click on **Code Signing** tab
      1. Find the **ANDROID KEYSTORE FILE** section
      1. Click or drop your file on the upload file field
      1. Fill the displayed 3 input fields:
       1. **Keystore password**
       1. **Keystore alias**
       1. **Private key password**
      1. Click on **[Save metadata]** button

      That's it! From now on, **Sign APK** step will receive your uploaded files.

      ## To run this workflow

      If you want to run this workflow manually:

      1. Open the app's build list page
      2. Click on **[Start/Schedule a Build]** button
      3. Select **deploy** in **Workflow** dropdown input
      4. Click **[Start Build]** button

      Or if you need this workflow to be started by a GIT event:

      1. Click on **Triggers** tab
      2. Setup your desired event (push/tag/pull) and select **deploy** workflow
      3. Click on **[Done]** and then **[Save]** buttons

      The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
    steps:
    - activate-ssh-key@4.0.3: {}
    - git-clone@4.0.14: {}
    - cache-pull@2.0.1: {}
    - script@1.1.5:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e

            # write your script here
            touch secrets.properties
            echo KEY_ALIAS=$BITRISEIO_ANDROID_KEYSTORE_ALIAS >> secrets.properties
            echo KEY_PASSWORD=$BITRISEIO_ANDROID_KEYSTORE_PASSWORD >> secrets.properties
            echo STORE_PASSWORD=$BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD >> secrets.properties

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
        title: KeyStore File Script
    - script@1.1.5:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e

            # write your script here
            touch github.properties
            echo gpr.usr=$GITHUB_USER >> github.properties
            echo gpr.key=$GITHUB_KEY >> github.properties

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
        title: Github Packages Script
    - install-missing-android-tools@2.3.5: {}
    - android-build@0.10:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - module: "$MODULE"
        - variant: "$VARIANT"
    - sign-apk:
        run_if: '{{getenv "BITRISEIO_ANDROID_KEYSTORE_URL" | ne ""}}'
    - deploy-to-bitrise-io:
        inputs:
        - notify_email_list: "$NOTIFY_EMAILS"
    - script@1.1.5:
        title: Whitelist App Version in the API
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            APP_VERSION_CODE=$(./gradlew -q appVersionCode | tail -n 1)

            envman add --key APP_VERSION_CODE --value $APP_VERSION_CODE

            wget  \
              --method POST \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Basic YXBwc0FkbWluOiZCYkt6YkBqSnFkdDhjIW4=' \
              --body-data "{\"os\": \"android\", \"appVersion\": $APP_VERSION_CODE}" \
              https://api.swvl.io/apps/
    - google-play-deploy@3:
        inputs:
        - package_name: io.swvl.customer
        - track: beta
        - whatsnews_dir: "./whatsnew"
        - service_account_json_key_path: "$BITRISEIO_SERVICE_ACCOUNT_DEPLOY_JSON_KEY_URL"
    - appgallery-deploy@1:
        inputs:
        - huawei_client_secret: "$APP_GALLERY_KEY"
        - huawei_app_id: "$APP_GALLERY_APP_ID"
        - huawei_client_id: "$APP_GALLERY_CLIENT_ID"
    - slack:
        inputs:
        - webhook_url: "$SLACK_ANDROID_DEPLOYMENT"
        - channel: "#android-deployments"
        - text: Yay! Build was successful!
        - emoji: ":muscle:"
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            Install APK|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - text_on_error: Ah! Something went wrong
        - emoji_on_error: ":disappointed_relieved:"
        - is_debug_mode: 'yes'
        - image_url: "$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL"
        - channel_on_error: "#android-deployments"
    before_run: []
  deploy-aab:
    description: |
      ## How to get a signed APK

      This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:

      1. Click on **Code Signing** tab
      1. Find the **ANDROID KEYSTORE FILE** section
      1. Click or drop your file on the upload file field
      1. Fill the displayed 3 input fields:
       1. **Keystore password**
       1. **Keystore alias**
       1. **Private key password**
      1. Click on **[Save metadata]** button

      That's it! From now on, **Sign APK** step will receive your uploaded files.

      ## To run this workflow

      If you want to run this workflow manually:

      1. Open the app's build list page
      2. Click on **[Start/Schedule a Build]** button
      3. Select **deploy** in **Workflow** dropdown input
      4. Click **[Start Build]** button

      Or if you need this workflow to be started by a GIT event:

      1. Click on **Triggers** tab
      2. Setup your desired event (push/tag/pull) and select **deploy** workflow
      3. Click on **[Done]** and then **[Save]** buttons

      The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
    steps:
    - activate-ssh-key@4.0.3: {}
    - git-clone@4.0.14: {}
    - cache-pull@2.0.1: {}
    - script@1.1.5:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e

            # write your script here
            touch secrets.properties
            echo KEY_ALIAS=$BITRISEIO_ANDROID_KEYSTORE_ALIAS >> secrets.properties
            echo KEY_PASSWORD=$BITRISEIO_ANDROID_KEYSTORE_PASSWORD >> secrets.properties
            echo STORE_PASSWORD=$BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD >> secrets.properties

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
        title: KeyStore File Script
    - script@1.1.5:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e

            # write your script here
            touch github.properties
            echo gpr.usr=$GITHUB_USER >> github.properties
            echo gpr.key=$GITHUB_KEY >> github.properties

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
        title: Github Packages Script
    - install-missing-android-tools@2.3.5: {}
    - android-build:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - module: "$MODULE"
        - build_type: aab
        - variant: "$VARIANT"
    - sign-apk:
        run_if: '{{getenv "BITRISEIO_ANDROID_KEYSTORE_URL" | ne ""}}'
    - deploy-to-bitrise-io:
        inputs:
        - notify_email_list: "$NOTIFY_EMAILS"
    - script@1.1.5:
        title: Whitelist App Version in the API
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            APP_VERSION_CODE=$(./gradlew -q appVersionCode | tail -n 1)

            envman add --key APP_VERSION_CODE --value $APP_VERSION_CODE

            wget  \
              --method POST \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Basic YXBwc0FkbWluOiZCYkt6YkBqSnFkdDhjIW4=' \
              --body-data "{\"os\": \"android\", \"appVersion\": $APP_VERSION_CODE}" \
              https://api.swvl.io/apps/
    - google-play-deploy@3.0.0:
        inputs:
        - user_fraction: '0.1'
        - package_name: io.swvl.customer
    - slack:
        inputs:
        - webhook_url: "$SLACK_ANDROID_DEPLOYMENT"
        - channel: "#android-deployments"
        - text: Yay! Build was successful!
        - emoji: ":muscle:"
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            Install APK|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - text_on_error: Ah! Something went wrong
        - emoji_on_error: ":disappointed_relieved:"
        - is_debug_mode: 'yes'
        - image_url: "$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL"
        - channel_on_error: "#android-deployments"
    - git-tag:
        inputs:
        - tag: v$APP_VERSION_CODE
        is_always_run: true
    before_run: []
  generate-apk:
    description: |
      ## How to get a signed APK

      This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:

      1. Click on **Code Signing** tab
      1. Find the **ANDROID KEYSTORE FILE** section
      1. Click or drop your file on the upload file field
      1. Fill the displayed 3 input fields:
       1. **Keystore password**
       1. **Keystore alias**
       1. **Private key password**
      1. Click on **[Save metadata]** button

      That's it! From now on, **Sign APK** step will receive your uploaded files.

      ## To run this workflow

      If you want to run this workflow manually:

      1. Open the app's build list page
      2. Click on **[Start/Schedule a Build]** button
      3. Select **deploy** in **Workflow** dropdown input
      4. Click **[Start Build]** button

      Or if you need this workflow to be started by a GIT event:

      1. Click on **Triggers** tab
      2. Setup your desired event (push/tag/pull) and select **deploy** workflow
      3. Click on **[Done]** and then **[Save]** buttons

      The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
    steps:
    - activate-ssh-key:
        inputs:
        - verbose: 'true'
        is_always_run: true
    - git-clone: {}
    - cache-pull: {}
    - script@1.1.5:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e

            # write your script here
            touch secrets.properties
            echo KEY_ALIAS=$BITRISEIO_ANDROID_KEYSTORE_ALIAS >> secrets.properties
            echo KEY_PASSWORD=$BITRISEIO_ANDROID_KEYSTORE_PASSWORD >> secrets.properties
            echo STORE_PASSWORD=$BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD >> secrets.properties

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
        title: KeyStore File Script
    - script@1.1.5:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e

            # write your script here
            touch github.properties
            echo gpr.usr=$GITHUB_USER >> github.properties
            echo gpr.key=$GITHUB_KEY >> github.properties

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
        title: Github Packages Script
    - install-missing-android-tools: {}
    - gradle-runner@1:
        inputs:
        - gradle_task: clean
    - android-build:
        inputs:
        - module: "$MODULE"
        - variant: "$VARIANT"
        - project_location: "$PROJECT_LOCATION"
    - sign-apk:
        run_if: '{{getenv "BITRISEIO_ANDROID_KEYSTORE_URL" | ne ""}}'
    - deploy-to-bitrise-io:
        inputs:
        - debug_mode: 'true'
        - notify_user_groups: none
        - deploy_path: "$BITRISE_SIGNED_APK_PATH"
        - notify_email_list: ''
    - create-install-page-qr-code@1: {}
    - slack@3:
        inputs:
        - is_debug_mode: 'yes'
        - webhook_url: "$SLACK_ANDROID_DEPLOYMENT"
        - text: Yay! Build was successful!
        - emoji: ":muscle:"
        - image_url: "$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL"
        - buttons: |
            View Build|${BITRISE_BUILD_URL}
            Install APK|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - channel_on_error: "#customer-dev-apks"
        - channel: "#customer-dev-apks"
    before_run: []
    after_run: []
  pull-request:
    steps:
    - activate-ssh-key:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
        inputs:
        - verbose: 'true'
    - git-clone: {}
    - cache-pull: {}
    - script:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e

            # write your script here
            touch secrets.properties
            echo KEY_ALIAS=$BITRISEIO_ANDROID_KEYSTORE_ALIAS >> secrets.properties
            echo KEY_PASSWORD=$BITRISEIO_ANDROID_KEYSTORE_PASSWORD >> secrets.properties
            echo STORE_PASSWORD=$BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD >> secrets.properties

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
        title: KeyStore File Script
    - script@1.1.5:
        title: Github Packages Script
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e

            # write your script here
            touch github.properties
            echo gpr.usr=$GITHUB_USER >> github.properties
            echo gpr.key=$GITHUB_KEY >> github.properties

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
    - install-missing-android-tools@2.3.5:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
    - gradle-runner@1.8.5:
        inputs:
        - gradle_task: detektCheck
        - gradlew_path: "./gradlew"
        title: Code Style
    - android-unit-test:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - module: "$UI_MODULE"
        - variant: "$VARIANT"
    - android-unit-test:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - variant: "$VARIANT"
        - module: "$PRESENTATION_MODULE"
    - android-unit-test:
        inputs:
        - module: "$USE_CASE_MODULE"
        - variant: "$VARIANT"
        - project_location: "$PROJECT_LOCATION"
    - cache-push@2.2.0: {}
    - slack:
        inputs:
        - webhook_url: "$SLACK_ANDROID_BITRISE"
        - channel: "#android-bitrise"
        - text: Yay! Build was successful!
        - emoji: ":muscle:"
        - buttons: |
            View App|${BITRISE_APP_URL}
            View Build|${BITRISE_BUILD_URL}
        - channel_on_error: "#android-bitrise"
        - text_on_error: Ah! Something went wrong
        - emoji_on_error: ":disappointed_relieved:"
        - is_debug_mode: 'yes'
    after_run: []
  test:
    steps:
    - activate-ssh-key@4: {}
    - git-clone@6: {}
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "Creating a directory for the automation project"
            mkdir customerAppAutomation

            echo "Start cloning automation repo"
            git clone -b fix_Promo git@github.com:swvl/customer-app-automation.git ./customerAppAutomation
    - deploy-to-bitrise-io@1:
        inputs:
        - is_compress: 'true'
        - deploy_path: "$BITRISE_SOURCE_DIR/customerAppAutomation/test-output"
    - slack@3:
        inputs:
        - webhook_url: "$SLACK_ANDROID_DEPLOYMENT"
        - channel: "#customer-dev-apks"
        - image_url: "$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL"
        - buttons: |
            View App|${BITRISE_APP_URL}
            View Build|${BITRISE_BUILD_URL}
            Install Report|$BITRISE_SOURCE_DIR/customerAppAutomation/test-output
        - is_debug_mode: 'yes'
  test-apk:
    description: |
      ## How to get a signed APK

      This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:

      1. Click on **Code Signing** tab
      1. Find the **ANDROID KEYSTORE FILE** section
      1. Click or drop your file on the upload file field
      1. Fill the displayed 3 input fields:
       1. **Keystore password**
       1. **Keystore alias**
       1. **Private key password**
      1. Click on **[Save metadata]** button

      That's it! From now on, **Sign APK** step will receive your uploaded files.

      ## To run this workflow

      If you want to run this workflow manually:

      1. Open the app's build list page
      2. Click on **[Start/Schedule a Build]** button
      3. Select **deploy** in **Workflow** dropdown input
      4. Click **[Start Build]** button

      Or if you need this workflow to be started by a GIT event:

      1. Click on **Triggers** tab
      2. Setup your desired event (push/tag/pull) and select **deploy** workflow
      3. Click on **[Done]** and then **[Save]** buttons

      The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
    steps:
    - avd-manager@1:
        inputs:
        - api_level: '29'
        - profile: Nexus 6
    - script@1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x\n\nfunction install_apk() {\n    cd /opt/android-sdk-linux/emulator/\n
            \   # ./emulator -avd emulator -qemu -no-snapshot -no-window -no-audio
            -verbose -x\n    adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed)
            ]]; do sleep 1; done;' \n    adb install \"$BITRISE_APK_PATH\"  \n    adb
            shell pm grant 'io.swvl.customer' android.permission.ACCESS_FINE_LOCATION\n\n}\n\ninstall_apk"
        title: Install APK on emulator
    - script@1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug
            log\nset -x\n\necho \"Installing Appium\"\nnpm install -g appium  --unsafe-perm=true
            --allow-root \n\nappium &>/dev/null &"
        title: Install Appium & Start Appium Server
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo "Creating a directory for the automation project"
            mkdir customerAppAutomation

            echo "Start cloning automation repo"
            git clone -b develop git@github.com:swvl/customer-app-automation.git ./customerAppAutomation
        title: Git Clone Automation Project
    - script@1:
        title: Install Maven
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            sudo apt-get install maven
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            # Run Android appium Test
            cd customerAppAutomation
            ls -la
            echo "Start running customer app Automation Project"

            mvn test -Denv.os=Android -Denv.api=$ENV_NAME -DtestSuite="src/test/java/setup/smoke.xml" -X
        title: Run Appium Android Tests
    - deploy-to-bitrise-io@1:
        inputs:
        - deploy_path: "$BITRISE_SOURCE_DIR/customerAppAutomation/target/surefire-reports"
    - slack@3:
        inputs:
        - webhook_url: "$SLACK_ANDROID_DEPLOYMENT"
        - channel_on_error: "#android-customer-automation"
        - channel: "#android-customer-automation"
    before_run:
    - generate-apk
app:
  envs:
  - PROJECT_LOCATION: "."
    opts:
      is_expand: false
  - opts:
      is_expand: false
    UI_MODULE: ui
  - opts:
      is_expand: false
    VARIANT: release
  - opts:
      is_expand: false
    PRESENTATION_MODULE: presentation
  - opts:
      is_expand: false
    USE_CASE_MODULE: use-cases
  - opts:
      is_expand: false
    GRADLEW_PATH: "./gradlew"
meta:
  bitrise.io:
    machine_type: performance